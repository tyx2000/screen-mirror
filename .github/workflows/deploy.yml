name: deploy to subdomain

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name}}

      - name: setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm

      - name: cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          node-version: 22
          key: ${{ runner.os }}-npm-${{ github.ref_name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ github.ref_name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: install npm dependencies
        run: npm ci

      - name: build and tag docker image
        run: |
          docker build -t mirror-screen:${{ github.sha }} .
          echo "==================build completed=================="
          docker images mirror-screen:${{ github.sha }}
          echo "==================build completed=================="
          docker tag mirror-screen:${{ github.sha }} mirror-screen:latest

      - name: save docker image to tar
        run: docker save -o mirror-screen-${{ github.sha }}.tar mirror-screen:${{ github.sha }}

      - name: upload docker image tar
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_TOKEN }}
          source: mirror-screen-${{ github.sha }}.tar
          target: ~/docker-images/

      - name: deploy via ssh
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_TOKEN }}
          script: |
            docker load -i ~/docker-images/mirror-screen-${{ github.sha }}.tar

            echo "==================docker images after load=================="
            docker images mirror-screen:${{ github.sha }}
            echo "==================docker images after load=================="

            rm -rf ~/docker-images/mirror-screen-${{ github.sha }}.tar

            cd ~/servers/
            sed -i "s|mirror-screen.*|mirror-screen:${{ github.sha }}|g" docker-compose.yml
            echo "====================update docker-compose.yml=============="
            cat docker-compose.yml

      #       sleep 5
      #       if ! docker ps -f name=mirror-screen | grep -q mirror-screen; then
      #         echo "Deployment failed: Container is not running."
      #         exit 1
      #       else
      #         echo "Deployment successful: Container is running."
      #       fi
      #       echo "Deployment completed successfully!"

      # - name: cleanup old docker images
      #   uses: appleboy/ssh-action@v1.2.2
      #   with:
      #     host: ${{ secrets.VPS_IP }}
      #     username: ${{ secrets.VPS_USERNAME }}
      #     key: ${{ secrets.SSH_TOKEN }}
      #     script: |
      #       docker image prune -f

      #       OLD_IMAGES=$(docker images mirror.yamazaki.buzz --format "{{.Repository}}:{{.Tag}}" | grep -v latest | grep -v ${{ github.sha }})
      #       if [ -n "$OLD_IMAGES" ]; then
      #         echo "Removing old images:"
      #         echo "$OLD_IMAGES"
      #         docker rmi $OLD_IMAGES || true
      #       else
      #         echo "No old images to remove."
      #       fi

      #       echo "Cleanup completed successfully!"
